import os
import tempfile
import logging
import asyncio
from PIL import Image
import time
from collections import deque
from dataclasses import dataclass
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    FSInputFile,
)
from aiogram.fsm.context import FSMContext

from states import StyleTransferStates
from kb import get_settings_keyboard, get_confirmation_keyboard, get_main_menu_keyboard

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –∏ —Å—á–µ—Ç—á–∏–∫
task_queue = deque()
queue_processing = False
last_position = 0
user_positions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é
queue_lock = asyncio.Lock()

MAX_QUEUE_SIZE = 5


@dataclass
class StyleTransferTask:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è"""

    user_id: int
    message: Message
    style_model: Any
    style_photo_path: str
    content_photo_path: str
    settings: Dict[str, float]
    position: int
    added_time: float
    state: FSMContext


async def process_queue():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏"""
    global queue_processing, task_queue, user_positions
    if len(task_queue) >= MAX_QUEUE_SIZE:
        await message.answer(
            "‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.",
        )
        return
    if queue_processing:
        return

    queue_processing = True

    try:
        while task_queue:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            async with queue_lock:
                task = task_queue.popleft()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            message = task.message
            style_model = task.style_model
            style_photo_path = task.style_photo_path
            content_photo_path = task.content_photo_path
            settings = task.settings
            user_id = task.user_id
            state = task.state

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–∑–∏—Ü–∏–π
            if user_id in user_positions:
                del user_positions[user_id]

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with queue_lock:
                for uid in user_positions:
                    if user_positions[uid] > task.position:
                        user_positions[uid] -= 1
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                        try:
                            await message.bot.send_message(
                                uid,
                                f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_positions[uid]}",
                            )
                        except Exception as e:
                            logger.error(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {e}"
                            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await message.answer(
                f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞! –ò–¥—ë—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π..."
            )

            try:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                style_img = style_model.preprocess_image(style_photo_path)
                content_img = style_model.preprocess_image(content_photo_path)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Canny –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ content —Ñ–æ—Ç–æ
                canny_img = style_model.get_canny_image(
                    content_img, detect_resolution=content_img.size[1]
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
                prompt = style_model.generate_prompt(content_img, style_img)

                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ–º–ø—Ç–æ–º
                await message.answer(f"–ü–µ—Ä–µ–Ω–æ—à—É —Å—Ç–∏–ª—å —Å –ø—Ä–æ–º–ø—Ç–æ–º:\n{prompt}")

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å —ç–º–æ–¥–∑–∏
                await message.answer(
                    "üé® –ò–¥—ë—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... ‚ö°Ô∏èüñåÔ∏è\n\n"
                    "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
                )

                # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                def run_generation():
                    return style_model.generate(
                        prompt=prompt,
                        base_img=content_img,
                        ip_adapter_img=style_img,
                        canny_img=canny_img,
                        guidance_scale=settings["guidance_scale"],
                        conditioning_scale=settings["conditioning_scale"],
                        inference_steps=settings["inference_steps"],
                        num_images=1,
                    )

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç
                loop = asyncio.get_event_loop()
                gen_images = await loop.run_in_executor(None, run_generation)

                # –°–æ–æ–±—â–∞–µ–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                await message.answer("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                generated_file_path = content_photo_path.replace(".jpg", "_gen.jpg")
                gen_images[0].save(generated_file_path)

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                result_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è",
                                callback_data="action:new_transfer",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="action:settings"
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:main_menu"
                            )
                        ],
                    ]
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                await message.answer_photo(
                    FSInputFile(generated_file_path),
                    caption=(
                        "‚ú® –í–æ—Ç –≤–∞—à–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! ‚ú®\n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                        f"‚Ä¢ Guidance Scale: {settings['guidance_scale']}\n"
                        f"‚Ä¢ Conditioning Scale: {settings['conditioning_scale']}\n"
                        f"‚Ä¢ Inference Steps: {settings['inference_steps']}\n"
                        f"‚Ä¢ IP Adapter Scale: {settings['ip_adapter_scale']}"
                    ),
                    reply_markup=result_kb,
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(style_photo_path)
                os.remove(content_photo_path)
                os.remove(generated_file_path)

                # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                del style_img, content_img, canny_img, gen_images
                import gc

                gc.collect()

                # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GPU, –æ—á–∏—â–∞–µ–º –µ–≥–æ –ø–∞–º—è—Ç—å
                try:
                    import torch

                    torch.cuda.empty_cache()
                except ImportError:
                    pass

                # Temporarily reduce IP-Adapter memory footprint
                if hasattr(style_model.pipe, "ip_adapter"):
                    style_model.pipe.ip_adapter = None
                    torch.cuda.empty_cache()

                # Restore IP-Adapter before next task
                style_model.pipe.load_ip_adapter(
                    "h94/IP-Adapter",
                    subfolder="models",
                    weight_name="ip-adapter_sd15.bin",
                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

                error_kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                                callback_data="action:new_transfer",
                            )
                        ],
                        [
                            InlineKeyboardButton(
                                text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:main_menu"
                            )
                        ],
                    ]
                )

                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=error_kb,
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                if os.path.exists(style_photo_path):
                    os.remove(style_photo_path)
                if os.path.exists(content_photo_path):
                    os.remove(content_photo_path)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()

            # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏
            await asyncio.sleep(1)

            try:
                style_model.cleanup()
            except Exception as e:
                logger.error(f"Error during model cleanup: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—á–µ—Ä–µ–¥–∏: {e}")
    finally:
        queue_processing = False
        # –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∑–∞–¥–∞—á–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–Ω–æ–≤–∞
        if task_queue:
            asyncio.create_task(process_queue())


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StyleTransfer Bot! üé®\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –¥—Ä—É–≥–æ–º—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(),
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üñº <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ StyleTransfer Bot</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –¥—Ä—É–≥–æ–º—É.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã style transfer\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ ¬´üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è¬ª –≤ –º–µ–Ω—é\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å —Å—Ç–∏–ª—è\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "<b>–û—á–µ—Ä–µ–¥—å:</b>\n"
        "–ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, "
        "–∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏. –í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã "
        "–æ –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "- Guidance Scale: Controls how closely the image follows the prompt\n"
        "- Conditioning Scale: Controls the influence of the control image\n"
        "- Inference Steps: Controls the quality (more steps = better quality but slower)\n"
        "- IP Adapter Scale: Controls the strength of the style transfer"
    )
    await message.answer(help_text, reply_markup=get_main_menu_keyboard())


@router.message(Command("queue"))
async def cmd_queue(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –∏ –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id

    if len(task_queue) == 0:
        await message.answer(
            "üü¢ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è!",
            reply_markup=get_main_menu_keyboard(),
        )
        return

    if user_id in user_positions:
        position = user_positions[user_id]
        await message.answer(
            f"üìä –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {position} –∏–∑ {len(task_queue)}\n\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {position * 1.5} –º–∏–Ω—É—Ç",
            reply_markup=get_main_menu_keyboard(),
        )
    else:
        await message.answer(
            f"üîç –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏.\n\n"
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ –æ—á–µ—Ä–µ–¥–∏: {len(task_queue)} –∑–∞–ø—Ä–æ—Å–æ–≤",
            reply_markup=get_main_menu_keyboard(),
        )


@router.message(Command("settings"))
async def cmd_settings(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data = await state.get_data()
    settings = {
        "guidance_scale": data.get("guidance_scale", 6.0),
        "conditioning_scale": data.get("conditioning_scale", 0.7),
        "inference_steps": data.get("inference_steps", 20),
        "ip_adapter_scale": data.get("ip_adapter_scale", 0.5),
    }

    await message.answer(
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"Guidance Scale: {settings['guidance_scale']}\n"
        f"Conditioning Scale: {settings['conditioning_scale']}\n"
        f"Inference Steps: {settings['inference_steps']}\n"
        f"IP Adapter Scale: {settings['ip_adapter_scale']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_settings_keyboard(),
    )


@router.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    current_state = await state.get_state()
    user_id = message.from_user.id

    if current_state is None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
        if user_id in user_positions:
            position = user_positions[user_id]
            # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            async with queue_lock:
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
                task_to_remove = None
                for task in task_queue:
                    if task.user_id == user_id:
                        task_to_remove = task
                        break

                if task_to_remove:
                    task_queue.remove(task_to_remove)
                    del user_positions[user_id]

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    for uid in user_positions:
                        if user_positions[uid] > position:
                            user_positions[uid] -= 1
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                            try:
                                await message.bot.send_message(
                                    uid,
                                    f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_positions[uid]}",
                                )
                            except Exception as e:
                                logger.error(
                                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {e}"
                                )

                    await message.answer(
                        "–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
                        reply_markup=get_main_menu_keyboard(),
                    )
                    return

        await message.answer(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.", reply_markup=get_main_menu_keyboard()
        )
        return

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    data = await state.get_data()
    style_photo_path = data.get("style_photo_path")
    content_photo_path = data.get("content_photo_path")

    if style_photo_path and os.path.exists(style_photo_path):
        os.remove(style_photo_path)

    if content_photo_path and os.path.exists(content_photo_path):
        os.remove(content_photo_path)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –æ—á–µ—Ä–µ–¥–∏, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if user_id in user_positions:
        position = user_positions[user_id]
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        async with queue_lock:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
            task_to_remove = None
            for task in task_queue:
                if task.user_id == user_id:
                    task_to_remove = task
                    break

            if task_to_remove:
                task_queue.remove(task_to_remove)
                del user_positions[user_id]

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for uid in user_positions:
                    if user_positions[uid] > position:
                        user_positions[uid] -= 1
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                        try:
                            await message.bot.send_message(
                                uid,
                                f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_positions[uid]}",
                            )
                        except Exception as e:
                            logger.error(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {e}"
                            )

    await message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu_keyboard(),
    )


@router.callback_query(F.data == "action:new_transfer")
async def start_new_transfer(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è"""
    await callback.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∏–ª–µ–≤–æ–≥–æ —Ñ–æ—Ç–æ
    await state.set_state(StyleTransferStates.waiting_for_style_photo)

    await callback.message.answer(
        "–ù–∞—á–Ω—ë–º –Ω–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è! üé®\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å —Å—Ç–∏–ª—è ‚Äî –ø–æ –Ω–µ–º—É –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø—Ä–∏–º–µ–Ω—è–µ–º—ã–π —Å—Ç–∏–ª—å."
    )


@router.message(StyleTransferStates.waiting_for_style_photo, F.photo)
async def on_style_photo(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å—Ç–∏–ª—è"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    await message.answer("–°—Ç–∏–ª–µ–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! ‚úÖ")

    # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
    await message.bot.download_file(file_path, temp_file.name)
    temp_file.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(style_photo_path=temp_file.name)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await state.set_state(StyleTransferStates.waiting_for_content_photo)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="action:cancel")]
        ]
    )

    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å—Ç–∏–ª—å.",
        reply_markup=cancel_kb,
    )


@router.message(StyleTransferStates.waiting_for_content_photo, F.photo)
async def on_content_photo(message: Message, state: FSMContext, style_model):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    global last_position, user_positions

    user_id = message.from_user.id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    await message.answer("–§–æ—Ç–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω! –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É... ‚è≥")

    # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".jpg")
    await message.bot.download_file(file_path, temp_file.name)
    temp_file.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(content_photo_path=temp_file.name)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    data = await state.get_data()
    style_photo_path = data.get("style_photo_path")
    content_photo_path = temp_file.name

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–±—Ä–∞–±–æ—Ç–∫–∞"
    await state.set_state(StyleTransferStates.processing)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = {
        "guidance_scale": data.get("guidance_scale", 6.0),
        "conditioning_scale": data.get("conditioning_scale", 0.7),
        "inference_steps": data.get("inference_steps", 20),
        "ip_adapter_scale": data.get("ip_adapter_scale", 0.5),
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–∑–∏—Ü–∏–∏
    async with queue_lock:
        last_position += 1
        current_position = last_position
        user_positions[user_id] = current_position

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ –æ—á–µ—Ä–µ–¥—å
        task = StyleTransferTask(
            user_id=user_id,
            message=message,
            style_model=style_model,
            style_photo_path=style_photo_path,
            content_photo_path=content_photo_path,
            settings=settings,
            position=current_position,
            added_time=time.time(),
            state=state,
        )

        task_queue.append(task)

    # –û–ø–æ–≤–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –µ–≥–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    queue_length = len(task_queue)
    estimated_time = queue_length * 1.5  # –ø—Ä–∏–º–µ—Ä–Ω–æ 1.5 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–¥–∞—á—É

    await message.answer(
        f"üìã –í–∞—à –∑–∞–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å!\n\n"
        f"–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: {current_position}\n"
        f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_length}\n"
        f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_time:.1f} –º–∏–Ω\n\n"
        f"–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /queue",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="action:cancel"
                    )
                ]
            ]
        ),
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if not queue_processing and queue_length == 1:
        asyncio.create_task(process_queue())


@router.message(F.photo)
async def photo_without_state(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–µ–∑ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    options_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è", callback_data="action:new_transfer"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="action:main_menu"
                )
            ],
        ]
    )

    await message.answer(
        "–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ, –Ω–æ —è –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç–∏–ª—è, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:",
        reply_markup=options_kb,
    )


@router.callback_query(F.data == "action:main_menu")
async def show_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –æ—á–µ—Ä–µ–¥–∏
    user_id = callback.from_user.id
    if user_id in user_positions:
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–Ω —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
        confirm_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
                        callback_data="confirm:cancel_queue",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏",
                        callback_data="confirm:keep_queue",
                    )
                ],
            ]
        )

        await callback.message.answer(
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏. –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –µ–≥–æ?",
            reply_markup=confirm_kb,
        )
        return

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await callback.message.answer(
        "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard(),
    )


@router.callback_query(F.data == "confirm:cancel_queue")
async def confirm_cancel_queue(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    user_id = callback.from_user.id

    if user_id in user_positions:
        position = user_positions[user_id]
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        async with queue_lock:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
            task_to_remove = None
            for task in task_queue:
                if task.user_id == user_id:
                    task_to_remove = task

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if os.path.exists(task.style_photo_path):
                        os.remove(task.style_photo_path)
                    if os.path.exists(task.content_photo_path):
                        os.remove(task.content_photo_path)
                    break

            if task_to_remove:
                task_queue.remove(task_to_remove)
                del user_positions[user_id]

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for uid in user_positions:
                    if user_positions[uid] > position:
                        user_positions[uid] -= 1
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                        try:
                            await callback.bot.send_message(
                                uid,
                                f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_positions[uid]}",
                            )
                        except Exception as e:
                            logger.error(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {e}"
                            )

    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
    await state.clear()

    await callback.message.answer(
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu_keyboard(),
    )


@router.callback_query(F.data == "confirm:keep_queue")
async def confirm_keep_queue(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥–∏"""
    await callback.answer("–ó–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")

    user_id = callback.from_user.id
    if user_id in user_positions:
        position = user_positions[user_id]
        queue_length = len(task_queue)
        estimated_time = position * 1.5  # –ø—Ä–∏–º–µ—Ä–Ω–æ 1.5 –º–∏–Ω—É—Ç—ã –Ω–∞ –∑–∞–¥–∞—á—É

        await callback.message.answer(
            f"üìã –í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏!\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {position}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_length}\n"
            f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {estimated_time:.1f} –º–∏–Ω\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /queue, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", callback_data="action:cancel"
                        )
                    ]
                ]
            ),
        )


@router.callback_query(F.data == "action:settings")
async def show_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–µ—Ä–µ–∑ callback"""
    await callback.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data = await state.get_data()
    settings = {
        "guidance_scale": data.get("guidance_scale", 6.0),
        "conditioning_scale": data.get("conditioning_scale", 0.7),
        "inference_steps": data.get("inference_steps", 20),
        "ip_adapter_scale": data.get("ip_adapter_scale", 0.5),
    }

    await callback.message.answer(
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"Guidance Scale: {settings['guidance_scale']}\n"
        f"Conditioning Scale: {settings['conditioning_scale']}\n"
        f"Inference Steps: {settings['inference_steps']}\n"
        f"IP Adapter Scale: {settings['ip_adapter_scale']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_settings_keyboard(),
    )


@router.callback_query(F.data == "action:help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
    await callback.answer()

    help_text = (
        "üñº <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ StyleTransfer Bot</b>\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –¥—Ä—É–≥–æ–º—É.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã style transfer\n"
        "/queue - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à—É –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
        "<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ ¬´üîÑ –ù–æ–≤—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è¬ª –≤ –º–µ–Ω—é\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ-—Ä–µ—Ñ–µ—Ä–µ–Ω—Å —Å—Ç–∏–ª—è\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)\n"
        "5. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
        "<b>–û—á–µ—Ä–µ–¥—å:</b>\n"
        "–ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç–∏–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, "
        "–∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏. –í—ã –±—É–¥–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã "
        "–æ –≤–∞—à–µ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "- Guidance Scale: Controls how closely the image follows the prompt\n"
        "- Conditioning Scale: Controls the influence of the control image\n"
        "- Inference Steps: Controls the quality (more steps = better quality but slower)\n"
        "- IP Adapter Scale: Controls the strength of the style transfer"
    )

    await callback.message.answer(help_text, reply_markup=get_main_menu_keyboard())


@router.callback_query(F.data.startswith("setting:"))
async def settings_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    action = callback.data.split(":")[1]
    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    guidance_scale = data.get("guidance_scale", 6.0)
    conditioning_scale = data.get("conditioning_scale", 0.7)
    inference_steps = data.get("inference_steps", 20)
    ip_adapter_scale = data.get("ip_adapter_scale", 0.5)

    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
    if action == "guidance_up":
        guidance_scale = min(guidance_scale + 0.5, 10.0)
    elif action == "guidance_down":
        guidance_scale = max(guidance_scale - 0.5, 1.0)
    elif action == "conditioning_up":
        conditioning_scale = min(conditioning_scale + 0.1, 1.0)
    elif action == "conditioning_down":
        conditioning_scale = max(conditioning_scale - 0.1, 0.1)
    elif action == "steps_up":
        inference_steps = min(inference_steps + 5, 50)
    elif action == "steps_down":
        inference_steps = max(inference_steps - 5, 10)
    elif action == "ip_up":
        ip_adapter_scale = min(ip_adapter_scale + 0.1, 1.0)
    elif action == "ip_down":
        ip_adapter_scale = max(ip_adapter_scale - 0.1, 0.1)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await state.update_data(
        guidance_scale=guidance_scale,
        conditioning_scale=conditioning_scale,
        inference_steps=inference_steps,
        ip_adapter_scale=ip_adapter_scale,
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
        f"Guidance Scale: {guidance_scale}\n"
        f"Conditioning Scale: {conditioning_scale}\n"
        f"Inference Steps: {inference_steps}\n"
        f"IP Adapter Scale: {ip_adapter_scale}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=get_settings_keyboard(),
    )

    await callback.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
def estimate_wait_time(position: int) -> float:
    """–í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    # –í —Å—Ä–µ–¥–Ω–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –æ–∫–æ–ª–æ 1.5 –º–∏–Ω—É—Ç
    average_task_time = 1.5  # –≤ –º–∏–Ω—É—Ç–∞—Ö
    return position * average_task_time


# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
async def update_queue_times():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏"""
    while True:
        await asyncio.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        if not task_queue:
            continue

        try:
            async with queue_lock:
                for uid, position in user_positions.items():
                    try:
                        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        for task in task_queue:
                            if task.user_id == uid:
                                # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—à–ª–æ —Å –º–æ–º–µ–Ω—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
                                elapsed_time = (
                                    time.time() - task.added_time
                                ) / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö

                                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                                remaining_time = max(
                                    0, estimate_wait_time(position) - elapsed_time
                                )

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                                if remaining_time > 2 and position > 1:
                                    await task.message.bot.send_message(
                                        uid,
                                        f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤ –æ—á–µ—Ä–µ–¥–∏:\n\n"
                                        f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {position} –∏–∑ {len(task_queue)}\n"
                                        f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {remaining_time:.1f} –º–∏–Ω",
                                    )
                                break
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏: {e}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
async def start_queue_updates():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏"""
    asyncio.create_task(update_queue_times())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    # if message.from_user.id != ADMIN_ID:
    #    await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
    #    return

    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:</b>\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {len(task_queue)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: {len(user_positions)}\n\n"
    )

    if task_queue:
        stats_text += "<b>–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"
        for i, task in enumerate(task_queue, 1):
            elapsed = (time.time() - task.added_time) / 60
            stats_text += f"{i}. ID: {task.user_id}, –∂–¥—ë—Ç {elapsed:.1f} –º–∏–Ω\n"
    else:
        stats_text += "–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞."

    await message.answer(stats_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
@router.callback_query(F.data == "action:cancel")
async def cancel_task_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ callback"""
    current_state = await state.get_state()
    user_id = callback.from_user.id

    if current_state is not None:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        data = await state.get_data()
        style_photo_path = data.get("style_photo_path")
        content_photo_path = data.get("content_photo_path")

        if style_photo_path and os.path.exists(style_photo_path):
            os.remove(style_photo_path)

        if content_photo_path and os.path.exists(content_photo_path):
            os.remove(content_photo_path)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    if user_id in user_positions:
        position = user_positions[user_id]
        async with queue_lock:
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥–∏
            task_to_remove = None
            for task in task_queue:
                if task.user_id == user_id:
                    task_to_remove = task
                    break

            if task_to_remove:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏
                if os.path.exists(task_to_remove.style_photo_path):
                    os.remove(task_to_remove.style_photo_path)
                if os.path.exists(task_to_remove.content_photo_path):
                    os.remove(task_to_remove.content_photo_path)

                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                task_queue.remove(task_to_remove)
                del user_positions[user_id]

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for uid in user_positions:
                    if user_positions[uid] > position:
                        user_positions[uid] -= 1
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                        try:
                            await callback.bot.send_message(
                                uid,
                                f"üìä –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {user_positions[uid]}",
                            )
                        except Exception as e:
                            logger.error(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏: {e}"
                            )

    await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu_keyboard(),
    )
